1. När använder man add respektive commit?
Svar:  "git add" lägger till en ändring i en fil till "staging area", men påverkar ej repository.
"git commit" är det kommando som gör att ändringen på filen faktiskt sparas som en ny version i repository.

2. När använder man pull respektive push?
Svar: "git pull" används för att hämta den senaste versionen av en fil (eller filer) från ett publikt repository till
ditt lokala repository. Kommandot både fetch och merge med ditt lokala repository.
"git push" används omvänt, du laddar upp ditt lokala repository till ett publikt repository.

3. När använder man log respektive status?
Svar: "git status" är användbart i ett par olika situationer. I stort ger det information vilken gren (branch) man är på samt
om den är uppdaterad. Man kan se om man har gjort ändringar i en fil som ej har sparats i sitt lokala repository. 
Även icke-följda filer (untracked) dyker upp på "git status".
"git log" ger information om de commits man har gjort till sitt lokala repository. Det inkluderar vem som har gjort commit:en, 
när de gjorts och varje commit visas med ett unikt ID. Commit-meddelanden visas också för att ge en bild över vad som ändrats 
vid de olika commitarna.

4. Hur kan man formulera sig i sina commit-meddelanden?
Svar: Man skriver i klartext, inget speciellt format. Var kort och koncis för att enkelt kunna följa uppdateringshistoriken.
T.ex. "added class Player".

Jag siktar på VG.

5. git restore, revert, reset.



git restore

Hämtar den senaste versionen av en fil från ditt repository och lägger i ditt working tree.

Scenario: Du har en fil, Spel.java, sparade i ditt repository. Samtidigt sitter du och jobbar med förbättringar
av ditt spel, men du har en dålig kväll och koden fungerar inte. Du har rört till det så mycket i din kod att du önskar inget
annat än att få tillbaka din senaste version av Spel.java. git restore är rätt verktyg. Förutsatt att dina (dåliga) ändringar
i Spel.java ligger kvar i ditt working tree, skriv "git restore Spel.java", så hämtar Git din senaste version från ditt
repository. git status kommer vara "ren", det är inget du behöver commita.



git revert

Gör en ny commit som ångrar en redan gjort commit

Scenario: Tänk scenariot ovan med Spel.java att du av någon outgrundligt dum anledning ändå commitade ändringarna med
din trasiga kod. Inte bara förstörde du din kod, du commitade den också. Men lugn, git revert kan rädda kvällen.
Först, skriva "git log --oneline" för att få den 7-tecken långa hashcode som hör till den commit du vill ångra. Sedan,
skriv "git revert <hashcode>". Din git revert kommer att loggas och dyka upp i git log. git status kommer vara "ren", det
är inget du behöver commita.
  


git reset


