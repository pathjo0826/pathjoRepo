1. När använder man add respektive commit?
Svar:  "git add" lägger till en ändring i en fil till "staging area", men påverkar ej repository.
"git commit" är det kommando som gör att ändringen på filen faktiskt sparas som en ny version i repository.

2. När använder man pull respektive push?
Svar: "git pull" används för att hämta den senaste versionen av en fil (eller filer) från ett publikt repository till
ditt lokala repository. Kommandot både fetch och merge med ditt lokala repository.
"git push" används omvänt, du laddar upp ditt lokala repository till ett publikt repository.

3. När använder man log respektive status?
Svar: "git status" är användbart i ett par olika situationer. I stort ger det information vilken gren (branch) man är på samt
om den är uppdaterad. Man kan se om man har gjort ändringar i en fil som ej har sparats i sitt lokala repository. 
Även icke-följda filer (untracked) dyker upp på "git status".
"git log" ger information om de commits man har gjort till sitt lokala repository. Det inkluderar vem som har gjort commit:en, 
när de gjorts och varje commit visas med ett unikt ID. Commit-meddelanden visas också för att ge en bild över vad som ändrats 
vid de olika commitarna.

4. Hur kan man formulera sig i sina commit-meddelanden?
Svar: Man skriver i klartext, inget speciellt format. Var kort och koncis för att enkelt kunna följa uppdateringshistoriken.
T.ex. "added class Player".

Jag siktar på VG.

5. git restore, revert, reset.



git restore

Hämtar den senaste versionen av en fil från ditt repository och lägger i ditt working tree.

Scenario: Du har en fil, Spel.java, sparad i ditt repository. Samtidigt sitter du och jobbar med förbättringar
av ditt spel, men du har en dålig kväll och koden fungerar inte. Du har rört till det så mycket i din kod att du önskar inget
annat än att få tillbaka din senaste version av Spel.java. git restore är rätt verktyg. Förutsatt att dina (dåliga) ändringar
i Spel.java ligger kvar i ditt working tree, kör "git restore Spel.java". Git hämtar din senaste version från ditt
repository. git status kommer vara "ren", det är inget du behöver commita.



git revert

Gör en ny commit som ångrar en redan gjort commit

Scenario: Tänk scenariot ovan med Spel.java igen. Den här gången har du av någon outgrundligt dum anledning ändå commitat
ändringarna med din trasiga kod. Inte bara förstörde du din kod, du commitade den också. Men lugn, git revert kan rädda kvällen.
Först, skriva "git log --oneline" för att få den 7-tecken långa hashcode som hör till den commit du vill ångra. Sedan,
skriv "git revert <hashcode>". Du har nu ångrat din tanklösa commit och ditt repository är tillbaka med versionen innan.
Din git revert kommer att loggas och dyka upp i git log. git status kommer vara "ren", det är inget mer du behöver commita.
  


git reset

Kommandot kan kallas på tre olika sätt, reset --hard, reset --mixed (= reset utan flagga), reset --soft.

git reset --hard: Återställer working directory och staging area till den senaste commit:en.
Scenario: Du arbetar brett med både Spel.java och Spelare.java. Versioner av båda filerna är sparade i ditt repository.
En uppdaterad version av Spel.java ligger i staging area. Men just nu arbetar du på Spelare.java, som ligger
i working directory. Av någon anledning är du missnöjd med dina ändringar i Spelare.java och vill återställa till senast
sparade version. Du gör en "git reset --hard". Detta återställer både staging area och working directory till senaste 
commit:en från ditt repository. Alla dina ändringar, både i Spel.java och Spelare.java går förlorade och KAN EJ ÅTERSTÄLLAS. 
Din git status kommer att vara "ren". git log kommer ej registrera din git reset --hard.

git reset (=git reset --mixed): Återställer endast staging area till senaste commit:en.
Scenario: Du har Spel.java sparat i ditt repository sedan tidigare. Just nu arbetar du med förbättringar på Spel.java samt
skriver en helt ny fil, instruktion.txt, med instruktioner till spelet. Båda filerna ligger i staging area. Kör du en 
git reset --mixed kommer staging area att återställas till senaste commit:en. Det betyder att du kommer att förlora dina
förbättringar i Spel.java. instruktion.txt kommer bli en "untracked file" eftersom den i senaste commit:en inte existerade.
Du kommer dock inte förlora filen från datorn.

git reset --soft: Återställer endast repository och lämnar staging area- samt working directory helt ifred.
Scenario: git reset --soft är svårast att demonstrera. Tänk så här: Jag har precis skapat en ny textfil - myBestRecipes.txt.
Jag updaterar den en, två och tre gånger så att jag har totalt fyra versioner som jag enkelt kan se skillnaden på. Jag har 
gjort tre commits och den fjärde (och senaste) versionen ligger endast i staging area. Av någon anledning kommer jag på att 
den första versionen var den bästa versionen och jag vill ha tillbaka den. Om jag kan få fram commit-ID:t (hint: git log) för den
versionen kommer jag med hjälp av en git reset --soft resa tillbaka i tiden i mitt repository.
Skriv "git reset --soft <commit-ID>. 
Det här skriver om historien! Om man kör git log kommer man se att version två och tre är borta ur historien, version ett är
den version som finns i ditt repository. En push till GitHub kommer ge dig tillgång till version ett av myBestReceipes.txt igen.
Värt att notera är att i ditt staging area ligger version 4 kvar. En git reset --soft påverkar alltså endast ditt repo, ej
working directory eller staging area.

